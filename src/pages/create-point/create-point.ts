import { Component, ViewChild, ElementRef } from '@angular/core';
import { NavController, AlertController } from 'ionic-angular';
import { Geolocation } from '@ionic-native/geolocation';
import { DbmanagerProvider } from "../../providers/dbmanager/dbmanager";
import { UtilsProvider } from "../../providers/utils/utils";

declare var google;

/* Pagina para creación de puntos */

@Component({
  selector: 'page-create-point', // selector del componente
  templateUrl: 'create-point.html', // Template asociado al componente
})
export class CreatePointPage {

  @ViewChild('map') private mapElement: ElementRef; // Listener del elemento con ID 'map' declarado en el template
  map: any; // Instancia del mapa

  // Point generated by GPS
  gpsLat: any = ''; // Latitud generada por el gps
  gpsLong: any = ''; // Longitud generada por el gps
  newPoint: any = { // Punto nuevo a guardar
    name: '',
    description: '',
    date: '',
    lat: 0,
    long: 0,
    type: ''
  };
  type: string = ''; // tipo del punto
  latHemisphire: string = ''; // Hemisferios para Elipsodiales GMS
  lngHemisphire: string = ''; // Hemisferios para Elipsodiales GMS
  gaussOrigin: string = ''; // Origen de las coordenadas de Gauss Krugger

  custom: boolean = false; // Booleanos para aparecer o desaparecer componentes de la vista
  created: boolean = false;

  constructor(public navCtrl: NavController,
    public alertCtrl: AlertController,
    private geolocation: Geolocation,
    public _db: DbmanagerProvider,
    private _utils: UtilsProvider) {
  }

  // Funcion que carga el mapa junto con sus marcadores, dependiento de una latitud y longitud

  loadMap(lat, long) {
    let latLng = new google.maps.LatLng(Number(lat), Number(long)); // Convertir la latitud y long a un objeto de Google

    let mapOptions = { // Configuraciones del mapa ( Como se ve, el zoom, en donde debe centrarse)
      center: latLng,
      zoom: 15,
      mapTypeId: google.maps.MapTypeId.HYBRID
    }

    if (this.created) {
      setTimeout(() => { // Funcion asincrona que instancia el mapa ( Se ejecuta luego de medio segundo al ser llamada loadMap())
        this.map = new google.maps.Map(this.mapElement.nativeElement, mapOptions); // Inserta al objeto map, una instancia de Google de tipo mapa
        let newMarker = new google.maps.Marker({ // Creación del marcador
          position: latLng,
          title: 'Nuevo punto',
          animation: google.maps.Animation.BOUNCE
        });
        newMarker.setMap(this.map); // Inserta el marcador en el mapa
      }, 500)
    }

  }

  // Función que obtiene la posicion actual del mapa

  getCurrentPosition() {
    this.geolocation.getCurrentPosition().then((resp) => {
      this.gpsLat = resp.coords.latitude;
      this.gpsLong = resp.coords.longitude;
      this.created = true;
      this._utils.presentLoading(1000);
      this.loadMap(this.gpsLat, this.gpsLong);
    }).catch((error) => {
      this.created = false;
      this._utils.presentToast('Error al obtener tu ubicación:' + error, 5000);
      console.log('Error getting location', error);
    });

  }

  // Funcion que reestablece los datos

  cleanData() {
    this.gpsLat = '';
    this.gpsLong = '';
    this.created = false;
    this.navCtrl.pop();
  }

  // Funcion que muestra un modal en pantalla donde se piden los datos del punto y luego se crea

  showCreatePrompt() {

    let prompt = this.alertCtrl.create({
      title: 'Crear punto',
      message: 'Ingresa un nombre para este nuevo punto',
      inputs: [
        {
          name: 'name',
          placeholder: 'Nombre'
        },
        {
          name: 'description',
          placeholder: 'Descripción del punto'
        }
      ],
      buttons: [
        {
          text: 'Cancelar',
          role: 'cancel'
        },
        {
          text: 'Guardar',
          handler: (data: any) => { // Funcion que dispara el boton guardar
            let today = new Date();
            this.newPoint.name = data.name; // Asignación de atributos al nuevo punto
            this.newPoint.description = data.description;
            this.newPoint.date = today.toLocaleDateString('es-CO');
            this.newPoint.lat = this.gpsLat;
            this.newPoint.long = this.gpsLong;
            this.newPoint.type = 'latlng';
            this._db.createPoint(this.newPoint) // Llamado al manager de la base de datos, se le pasa el nuevo punto y este lo crea
              .then(response => { // Evento que se dispara si el punto se crea satisfactoriamente
                this._utils.presentToast('Punto creado correctamente: ' + JSON.stringify(response), 5000);
                this.created = false;
              })
              .catch(error => { // Evento que se dispara si falla la creación
                this._utils.presentToast('Error al crear el punto: ' + JSON.stringify(error), 5000);
              });
          }
        }
      ]
    });
    prompt.present(); // Funcion que muestra el modal

  }


}
